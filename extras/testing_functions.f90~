! Script for testing functions. Comment out all but the function you want to test


!-!----------------------------------------------------
!-subroutine strong_rule (jxx, bn, ga, pf, tlam, alsparse)
!-        !-------------------------------------------
!-        implicit none
!-        !strong rule check
!-        integer :: bn
!-        integer :: g
!-        integer :: jxx(bn)
!-        double precision :: ga(bn)
!-        double precision :: pf(bn)
!-        double precision :: tlam, alsparse
!-        !------------------------------------------
!-        do g = 1, bn
!-                if(jxx(g) == 1) cycle
!-                if(ga(g) > pf(g)*tlam*(1-alsparse)) jxx(g) = 1
!-        enddo
!-end subroutine strong_rule
!-
!-
!-program test_strong_rule
!-        implicit none
!-        integer :: g, bn
!-        integer :: jxx(4) = (/1,0,0,1/) 
!-        double precision :: ga(4) = (/1,2,3,4/)
!-        double precision :: pf(4) = (/1,1,1,1/)
!-        double precision :: tlam = 2.1, alsparse = 0.5
!-        !-----------------------------
!-        bn = size(jxx)
!-        call strong_rule(jxx, bn, ga, pf, tlam, alsparse)
!-        print *, jxx
!-end program


!- !--------------------------------------------
!- SUBROUTINE softthresh(vec, thresh, n)
!-         !------------------------------------
!-   INTEGER :: n, it
!-   DOUBLE PRECISION :: vec(n)
!-   DOUBLE PRECISION :: sg, thresh
!-   DO it=1,n
!-     sg = vec(it)
!-     vec(it) = sign(max(abs(sg) - thresh, 0.0D0), sg)
!-   ENDDO
!- END SUBROUTINE softthresh
!- 
!- 
!- 
!- 
!- program test_softthresh
!-         implicit none
!-         integer :: n = 10, i
!-         double precision, dimension(:), allocatable :: vec
!-         double precision :: thresh = 2.0
!-         !------------------------------
!-         allocate(vec(1:n))
!-         !------------------------------
!-         do i = 1, size(vec)
!-                 vec(i) = i
!-         end do
!-         print *, vec
!-         call softthresh(vec, thresh, n)
!-         print *, vec
!- end program test_softthresh
 

!-!----------------------------------------------
!-subroutine kkt_check(bn, soft_g, jx, startix, endix, jxx, ix, iy, bs, vl, snorm, lama, lam1ma, ga, pf, s)
!-        !--------------------------------------
!-        implicit none
!-        integer :: g, bn, soft_g, jx, startix, endix
!-        integer :: jxx(bn)
!-        integer :: ix(bn)
!-        integer :: iy(bn)
!-        integer :: bs(bn)
!-        double precision :: vl(nvars)
!-        double precision :: snorm, lama, lam1ma
!-        double precision, dimension (:), allocatable :: s
!-        double precision :: ga(bn)
!-        double precision :: pf(bn)
!-        !---------------------------------------
!-        do g = 1, bn
!-                if (jxx(g) == 1) cycle
!-                startix = ix(g)
!-                endix = iy(g)
!-                allocate (s(bs(g)))
!-                s = vl(startix:endix)
!-                do soft_g = 1,bs(g)
!-                        s(soft_g) = sign(max(abs(s(soft_g))-lama, 0.0D0), s(soft_g))
!-                enddo
!-                snorm = sqrt(dot_product(s,s))
!-                ga(g) = snorm
!-                deallocate(s)
!-                if(ga(g) > pf(g)*lam1ma) then
!-                        jxx(g) = 1
!-                        jx = 1
!-                endif
!-        enddo
!-end subroutine
!-


!-!----------------------------------------------
!-subroutine update_step(bn, soft_g, jx, startix, b, oldb, t_for_s, tea, endix, jxx, ix, iy, bs, vl, snorm, lama, lam1ma, ga, pf, s)
!-        !--------------------------------------
!-        implicit none
!-        integer :: g, bn, soft_g, jx, startix, endix
!-        integer :: jxx(bn)
!-        integer :: ix(bn)
!-        integer :: iy(bn)
!-        integer :: bs(bn)
!-        double precision :: vl(nvars)
!-        double precision :: snorm, lama, lam1ma
!-        double precision, dimension (:), allocatable :: s
!-        double precision :: ga(bn), oldb(bs(g))
!-        double precision :: pf(bn)
!-        !---------------------------------------
!-
!-        DO g=1,bn
!-           IF(jxx(g) == 0) CYCLE
!-           startix=ix(g)
!-           endix=iy(g)
!-           ALLOCATE(dd(bs(g)))
!-           ALLOCATE(oldb(bs(g)))
!-           !oldb=b(startix:endix) JUST PASS IN
!-           ALLOCATE(s(bs(g)))
!-           s = vl(startix:endix)
!-           s = s*t_for_s(g) + b(startix:endix)
!-           DO soft_g = 1, bs(g)
!-              sg = s(soft_g)
!-              s(soft_g) = sign(max(abs(s(soft_g))-lama*t_for_s(g), 0.0D0), s(soft_g))
!-           ENDDO
!-           snorm = sqrt(dot_product(s,s))
!-           tea = snorm - t_for_s(g)*lam1ma*pf(g)
!-           IF(tea>0.0D0) THEN
!-              b(startix:endix) = s*tea/snorm
!-           ELSE
!-              b(startix:endix) = 0.0D0
!-           ENDIF
!-           dd=b(startix:endix)-oldb
!-           IF(any(dd/=0.0D0)) THEN
!-              dif=max(dif,gam(g)**2*dot_product(dd,dd))
!-              r=r-matmul(x(:,startix:endix),dd)
!-              IF(oidx(g)==0) THEN ! Here is where middle loop is different; if group g was not in oidx (active), and the
!-                 ! difference was nonzero, put it in active (ni)
!-                 ni=ni+1
!-                 IF(ni>pmax) EXIT
!-                 oidx(g)=ni
!-                 idx(ni)=g
!-              ENDIF
!-           ENDIF
!-           DEALLOCATE(s,dd,oldb)
!-        ENDDO ! End middle loop
!-end subroutine
!-
!-subroutine update_step(ni)
!-        implicit none
!-        integer :: j, g, ni, startix, endix
!-        integer :: startix(ni)
!-        integer :: endix(ni)
!-        double precision :: vl
!-        double precision :: s(bs(g)), dd(bs(g)), oldb(bs(g)), b
!-        double precision :: t_for_s, bs, lama, soft_g, snorm, tea, lam1ma, dif, dd
!-              DO j=1,ni
!-                 g=idx(j)
!-                 startix=ix(g)
!-                 endix=iy(g)
!-                 ALLOCATE(s(bs(g)))
!-                 ALLOCATE(dd(bs(g)))
!-                 ALLOCATE(oldb(bs(g)))
!-                 oldb=b(startix:endix)
!-                 s = matmul(r,x(:,startix:endix))/nobs
!-                 s = s*t_for_s(g) + b(startix:endix)
!-                 DO soft_g = 1, bs(g)
!-                    s(soft_g) = sign(max(abs(s(soft_g))-lama*t_for_s(g), 0.0D0), s(soft_g))
!-                 ENDDO
!-                 snorm = sqrt(dot_product(s,s))
!-                 tea = snorm - t_for_s(g)*lam1ma*pf(g)
!-                 IF(tea>0.0D0) THEN
!-                    b(startix:endix) = s*tea/snorm
!-                 ELSE
!-                    b(startix:endix) = 0.0D0
!-                 ENDIF
!-                 dd=b(startix:endix)-oldb
!-                 IF(any(dd/=0.0D0)) THEN
!-                    dif=max(dif,gam(g)**2*dot_product(dd,dd))
!-                    r=r-matmul(x(:,startix:endix),dd)
!-                 ENDIF
!-                 DEALLOCATE(s,dd,oldb)
!-                 ! DEALLOCATE(u,dd,oldb)
!-              ENDDO ! END INNER LOOP
!-end subroutine
